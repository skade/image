var searchIndex = {};
searchIndex['image'] = {"items":[[0,"","image","This crate provides native rust implementations of\nImage encoders and decoders and basic image manipulation\nfunctions."],[3,"Luma","","Grayscale colors"],[3,"LumaA","","Grayscale colors + alpha channel"],[3,"Rgb","","RGB colors"],[3,"Rgba","","RGB colors + alpha channel"],[3,"SubImage","","A View into another image"],[3,"ImageBuffer","","Generic image buffer"],[3,"Pixels","","Immutable pixel iterator"],[3,"MutPixels","","Mutable pixel iterator"],[3,"Frame","","A single animation frame"],[3,"Frames","","Hold the frames of the animated image"],[4,"ColorType","","An enumeration over supported color types and their bit depths"],[13,"Gray","","Pixel is grayscale",0],[13,"RGB","","Pixel contains R, G and B channels",0],[13,"Palette","","Pixel is an index into a color palette",0],[13,"GrayA","","Pixel is grayscale with an alpha channel",0],[13,"RGBA","","Pixel is RGB with an alpha channel",0],[4,"ImageError","","An enumeration of Image Errors"],[13,"FormatError","","The Image is not formatted properly",1],[13,"DimensionError","","The Image's dimensions are either too small or too large",1],[13,"UnsupportedError","","The Decoder does not support this image format",1],[13,"UnsupportedColor","","The Decoder does not support this color type",1],[13,"NotEnoughData","","Not enough data was provided to the Decoder\nto decode the image",1],[13,"IoError","","An I/O Error occurred while decoding the image",1],[13,"ImageEnd","","The end of the image has been reached",1],[4,"ImageFormat","","An enumeration of supported image formats.\nNot all formats support both encoding and decoding."],[13,"PNG","","An Image in PNG Format",2],[13,"JPEG","","An Image in JPEG Format",2],[13,"GIF","","An Image in GIF Format",2],[13,"WEBP","","An Image in WEBP Format",2],[13,"PPM","","An Image in PPM Format",2],[13,"TIFF","","An Image in TIFF Format",2],[13,"TGA","","An Image in TGA Format",2],[4,"FilterType","","Available Sampling Filters"],[13,"Nearest","","Nearest Neighbor",3],[13,"Triangle","","Linear Filter",3],[13,"CatmullRom","","Cubic Filter",3],[13,"Gaussian","","Gaussian Filter",3],[13,"Lanczos3","","Lanczos with window 3",3],[4,"DynamicImage","","A Dynamic Image"],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",4],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",4],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",4],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",4],[5,"open","","Open the image located at the path specified.\nThe image's format is determined from the path's file extension."],[5,"load","","Create a new image from a Reader"],[5,"load_from_memory","","Create a new image from a byte slice\nMakes an educated guess about the image format.\nTGA is not supported by this function."],[5,"load_from_memory_with_format","","Create a new image from a byte slice"],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified."],[0,"math","",""],[0,"utils","image::math","Shared mathematical utilities."],[5,"clamp","image::math::utils","Cut value to be inside given range"],[0,"imageops","image","Image Processing Functions"],[5,"rotate90","image::imageops","Rotate an image 90 degrees clockwise."],[5,"rotate180","","Rotate an image 180 degrees clockwise."],[5,"rotate270","","Rotate an image 270 degrees clockwise."],[5,"flip_horizontal","","Flip an image horizontally"],[5,"flip_vertical","","Flip an image vertically"],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image.\n```kernel``` is an array of the filter weights of length 9."],[5,"resize","","Resize the supplied image to the specified dimensions\n```nwidth``` and ```nheight``` are the new dimensions.\n```filter``` is the sampling filter to use."],[5,"blur","","Performs a Gaussian blur on the supplied image.\n```sigma``` is a measure of how much to blur by."],[5,"unsharpen","","Performs an unsharpen mask on the supplied image\n```sigma``` is the amount to blur the image by.\n```threshold``` is the threshold for the difference between\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking"],[5,"grayscale","","Convert the supplied image to grayscale"],[5,"invert","","Invert each pixel within the supplied image\nThis function operates in place."],[5,"contrast","","Adjust the contrast of the supplied image\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast."],[5,"brighten","","Brighten the supplied image\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it."],[5,"crop","","Return a mutable view into an image"],[5,"overlay","","Overlay an image at a given coordinate (x, y)"],[0,"webp","image","Decoding of Webp Images"],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder."],[11,"new","","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",5],[11,"dimensions","","",5],[11,"colortype","","",5],[11,"row_len","","",5],[11,"read_scanline","","",5],[11,"read_image","","",5],[0,"vp8","","An implementation of the VP8 Video Codec"],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame"],[12,"width","","The width of the luma plane",6],[12,"height","","The height of the luma plane",6],[12,"ybuf","","The luma plane of the frame",6],[12,"keyframe","","Indicates whether this frame is a keyframe",6],[12,"for_display","","Indicates whether this frame is intended for display",6],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2\nof the VP8 Specification",6],[3,"VP8Decoder","","VP8 Decoder\nOnly decodes keyframes"],[11,"clone","","",6],[11,"fmt","","",6],[11,"default","","",6],[11,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",7],[11,"decode_frame","","Decodes the current frame and returns a reference to it",7],[0,"ppm","image","Encoding of portable pixmap Images"],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder."],[11,"new","","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",8],[11,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",8],[0,"png","image","Decoding and Encoding of PNG Images"],[3,"PNGDecoder","image::png","The representation of a PNG decoder"],[3,"PNGEncoder","","The representation of a PNG encoder"],[11,"new","","Create a new decoder that decodes from the stream ```r```",9],[11,"palette","","Returns a reference to the color palette used for indexed\ncolor images.\nEach array element is a tuple of RGB values.",9],[11,"dimensions","","",9],[11,"colortype","","",9],[11,"row_len","","",9],[11,"read_scanline","","",9],[11,"read_image","","",9],[11,"new","","Create a new encoder that writes its output to ```w```",10],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",10],[0,"zlib","","An Implementation of RFC 1950"],[3,"ZlibDecoder","image::png::zlib","A Zlib compressed stream decoder."],[11,"new","","Create a new decoder that decodes from a Reader",11],[11,"inner","","Return a mutable reference to the wrapped Reader",11],[11,"read","","",11],[0,"deflate","image::png","An Implementation of RFC 1951"],[3,"Inflater","image::png::deflate","A DEFLATE compressed stream decoder."],[11,"new","","Create a new decoder that decodes from a Reader",12],[11,"eof","","Indicate whether the end of the stream has been reached.",12],[11,"inner","","Return a mutable reference to the wrapped Reader",12],[11,"read","","",12],[0,"hash","image::png","This module provides implementations of common hashing algorithms."],[3,"Adler32","image::png::hash","An Implementation of the Adler-32 checksum"],[3,"Crc32","","An Implementation of the Crc-32 checksum"],[11,"new","","Create a new hasher.",13],[11,"update","","Update the internal hasher with the bytes from ```buf```",13],[11,"checksum","","Return the computed hash.",13],[11,"reset","","Reset this hasher to its initial state.",13],[11,"new","","Create a new hasher.",14],[11,"update","","Update the internal hasher with the bytes from ```buf```",14],[11,"checksum","","Return the computed hash.",14],[11,"reset","","Reset this hasher to its initial state.",14],[0,"jpeg","image","Decoding and Encoding of JPEG Images"],[3,"JPEGDecoder","image::jpeg","The representation of a JPEG decoder"],[3,"JPEGEncoder","","The representation of a JPEG encoder"],[3,"Component","","A representation of a JPEG component"],[12,"id","","The Component's identifier",15],[12,"h","","Horizontal sampling factor",15],[12,"v","","Vertical sampling factor",15],[12,"tq","","The quantization table selector",15],[12,"dc_table","","Index to the Huffman DC Table",15],[12,"ac_table","","Index to the AC Huffman Table",15],[12,"dc_pred","","The dc prediction of the component",15],[11,"new","","Create a new encoder that writes its output to ```w```",16],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```\nThe Image in encoded with subsampling ratio 4:2:2",16],[11,"clone","","",15],[11,"new","","Create a new decoder that decodes from the stream ```r```",17],[11,"dimensions","","",17],[11,"colortype","","",17],[11,"row_len","","",17],[11,"read_scanline","","",17],[11,"read_image","","",17],[0,"gif","image","Decoding of GIF Images"],[3,"GIFDecoder","image::gif","A gif decoder"],[11,"new","","Creates a new GIF decoder",18],[11,"dimensions","","",18],[11,"colortype","","",18],[11,"row_len","","",18],[11,"read_scanline","","",18],[11,"read_image","","",18],[0,"tiff","image","Decoding and Encoding of TIFF Images"],[3,"TIFFDecoder","image::tiff","The representation of a PNG decoder"],[4,"ByteOrder","","Byte order of the TIFF file."],[13,"LittleEndian","","little endian byte order",19],[13,"BigEndian","","big endian byte order",19],[11,"fmt","","",20],[11,"new","","Create a new decoder that decodes from the stream ```r```",20],[11,"init","","Initializes the decoder.",20],[11,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",20],[11,"more_images","","Returns `true` if there is at least one more image available.",20],[11,"byte_order","","Returns the byte_order",20],[11,"read_short","","Reads a TIFF short value",20],[11,"read_long","","Reads a TIFF long value",20],[11,"read_offset","","Reads a TIFF IFA offset/value field",20],[11,"goto_offset","","Moves the cursor to the specified offset",20],[11,"dimensions","","",20],[11,"colortype","","",20],[11,"row_len","","",20],[11,"read_scanline","","",20],[11,"read_image","","",20],[11,"fmt","","",19],[0,"tga","image","Decoding of TGA Images"],[3,"TGADecoder","image::tga","The representation of a TGA decoder"],[11,"new","","Create a new decoder that decodes from the stream `r`",21],[11,"dimensions","","",21],[11,"colortype","","",21],[11,"row_len","","",21],[11,"read_scanline","","",21],[11,"read_image","","",21],[11,"eq","image","",1],[11,"ne","","",1],[11,"fmt","","",1],[11,"clone","","",1],[11,"fmt","","",1],[11,"from_error","","",1],[11,"fmt","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"next","","",22],[11,"next","","",23],[11,"new","","Construct a new subimage",24],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",24],[11,"change_bounds","","Change the coordinates of this subimage.",24],[11,"to_image","","Convert this subimage to an ImageBuffer",24],[11,"dimensions","","",24],[11,"bounds","","",24],[11,"get_pixel","","",24],[11,"put_pixel","","",24],[11,"blend_pixel","","",24],[11,"get_pixel_mut","","",24],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",4],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey\npixels with transparency.",4],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",4],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",4],[11,"to_rgb","","Returns a copy of this image as an RGB image.",4],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",4],[11,"to_luma","","Returns a copy of this image as a Luma image.",4],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",4],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",4],[11,"as_rgb8","","Return a reference to an 8bit RGB image",4],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",4],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",4],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",4],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",4],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",4],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",4],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",4],[11,"raw_pixels","","Return this image's pixels as a byte vector.",4],[11,"color","","Return this image's color type.",4],[11,"grayscale","","Return a grayscale version of this image.",4],[11,"invert","","Invert the colors of this image.\nThis method operates inplace.",4],[11,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image's aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image's dimensions",4],[11,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image's dimensions",4],[11,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",4],[11,"unsharpen","","Performs an unsharpen mask on this image\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking",4],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",4],[11,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",4],[11,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",4],[11,"flipv","","Flip this image vertically",4],[11,"fliph","","Flip this image horizontally",4],[11,"rotate90","","Rotate this image 90 degrees clockwise.",4],[11,"rotate180","","Rotate this image 180 degrees clockwise.",4],[11,"rotate270","","Rotate this image 270 degrees clockwise.",4],[11,"save","","Encode this image and write it to ```w```",4],[11,"dimensions","","",4],[11,"bounds","","",4],[11,"get_pixel","","",4],[11,"put_pixel","","",4],[11,"blend_pixel","","",4],[11,"get_pixel_mut","","",4],[11,"clone","","",0],[11,"fmt","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"fmt","","",25],[11,"clone","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"channel_count","","",25],[11,"color_model","","",25],[11,"color_type","","",25],[11,"channels","","",25],[11,"channels_mut","","",25],[11,"channels4","","",25],[11,"from_channels","","",25],[11,"from_slice","","",25],[11,"from_slice_mut","","",25],[11,"to_rgb","","",25],[11,"to_rgba","","",25],[11,"to_luma","","",25],[11,"to_luma_alpha","","",25],[11,"map","","",25],[11,"apply","","",25],[11,"map_with_alpha","","",25],[11,"apply_with_alpha","","",25],[11,"map2","","",25],[11,"apply2","","",25],[11,"invert","","",25],[11,"blend","","",25],[11,"index","","",25],[11,"index_mut","","",25],[11,"fmt","","",26],[11,"clone","","",26],[11,"eq","","",26],[11,"ne","","",26],[11,"channel_count","","",26],[11,"color_model","","",26],[11,"color_type","","",26],[11,"channels","","",26],[11,"channels_mut","","",26],[11,"channels4","","",26],[11,"from_channels","","",26],[11,"from_slice","","",26],[11,"from_slice_mut","","",26],[11,"to_rgb","","",26],[11,"to_rgba","","",26],[11,"to_luma","","",26],[11,"to_luma_alpha","","",26],[11,"map","","",26],[11,"apply","","",26],[11,"map_with_alpha","","",26],[11,"apply_with_alpha","","",26],[11,"map2","","",26],[11,"apply2","","",26],[11,"invert","","",26],[11,"blend","","",26],[11,"index","","",26],[11,"index_mut","","",26],[11,"fmt","","",27],[11,"clone","","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"channel_count","","",27],[11,"color_model","","",27],[11,"color_type","","",27],[11,"channels","","",27],[11,"channels_mut","","",27],[11,"channels4","","",27],[11,"from_channels","","",27],[11,"from_slice","","",27],[11,"from_slice_mut","","",27],[11,"to_rgb","","",27],[11,"to_rgba","","",27],[11,"to_luma","","",27],[11,"to_luma_alpha","","",27],[11,"map","","",27],[11,"apply","","",27],[11,"map_with_alpha","","",27],[11,"apply_with_alpha","","",27],[11,"map2","","",27],[11,"apply2","","",27],[11,"invert","","",27],[11,"blend","","",27],[11,"index","","",27],[11,"index_mut","","",27],[11,"fmt","","",28],[11,"clone","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"channel_count","","",28],[11,"color_model","","",28],[11,"color_type","","",28],[11,"channels","","",28],[11,"channels_mut","","",28],[11,"channels4","","",28],[11,"from_channels","","",28],[11,"from_slice","","",28],[11,"from_slice_mut","","",28],[11,"to_rgb","","",28],[11,"to_rgba","","",28],[11,"to_luma","","",28],[11,"to_luma_alpha","","",28],[11,"map","","",28],[11,"apply","","",28],[11,"map_with_alpha","","",28],[11,"apply_with_alpha","","",28],[11,"map2","","",28],[11,"apply2","","",28],[11,"invert","","",28],[11,"blend","","",28],[11,"index","","",28],[11,"index_mut","","",28],[11,"from_color","","",26],[11,"from_color","","",26],[11,"from_color","","",26],[11,"from_color","","",28],[11,"from_color","","",28],[11,"from_color","","",28],[11,"from_color","","",27],[11,"from_color","","",27],[11,"from_color","","",27],[11,"from_color","","",25],[11,"from_color","","",25],[11,"from_color","","",25],[11,"blend","","",28],[11,"blend","","",26],[11,"blend","","",27],[11,"blend","","",25],[11,"invert","","",28],[11,"invert","","",26],[11,"invert","","",27],[11,"invert","","",25],[11,"as_mut_slice","collections::vec","",29],[11,"from_raw","image","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)\nReturns None if the container is not big enough",30],[11,"into_raw","","Returns the underlying raw buffer",30],[11,"dimensions","","The width and height of this image.",30],[11,"width","","The width of this image.",30],[11,"height","","The height of this image.",30],[11,"as_slice","","The raw image data as a slice.",30],[11,"as_mut_slice","","The raw image data as a slice.",30],[11,"pixels","","Returns an iterator over the pixels of this image.",30],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",30],[11,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",30],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",30],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",30],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",30],[11,"put_pixel","","Puts a pixel at location `(x, y)`",30],[11,"save","","Saves the buffer to a file at the path specified.",30],[11,"clone","","",30],[11,"dimensions","","",30],[11,"bounds","","",30],[11,"get_pixel","","",30],[11,"get_pixel_mut","","",30],[11,"put_pixel","","",30],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",30],[11,"index","","",30],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",30],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",30],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel's x and y coordinates.",30],[11,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",30],[11,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",30],[11,"convert","","",30],[11,"new","","Contructs a new frame iterator",31],[11,"clone","","",32],[11,"new","","Contructs a new frame",32],[11,"from_parts","","Contructs a new frame",32],[11,"delay","","Delay of this frame",32],[11,"buffer","","Returns the image buffer",32],[11,"into_buffer","","Returns the image buffer",32],[11,"left","","Returns the x offset",32],[11,"top","","Returns the x offset",32],[11,"next","","",31],[6,"ImageResult","","Result of an image decoding/encoding process"],[6,"RgbImage","","Sendable Rgb image buffer"],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer"],[6,"GrayImage","","Sendable grayscale image buffer"],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer"],[8,"Primitive","","Primitive trait from old stdlib, added max_value"],[10,"max_value","","The maximum value of primitive.",33],[8,"Pixel","","A generalized pixel."],[16,"Subpixel","image::Pixel","The underlying subpixel type."],[10,"channel_count","image","Returns the number of channels of this pixel type.",34],[10,"channels","","Returns the components as a slice.",34],[10,"channels_mut","","Returns the components as a mutable slice",34],[10,"color_model","","Returns a string that can help to interprete the meaning each channel\nSee [gimp babl](http://gegl.org/babl/).",34],[10,"color_type","","Returns the ColorType for this pixel format",34],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel\nhas less than 4 channels the remainder is filled with the maximum value\nTODO deprecate",34],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d.\nIf the pixel does not contain 4 channels the extra are ignored.\nTODO deprecate",34],[10,"from_slice","","Returns a view into a slice.",34],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",34],[10,"to_rgb","","Convert this pixel to RGB",34],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",34],[10,"to_luma","","Convert this pixel to luma",34],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",34],[10,"map","","Apply the function ```f``` to each channel of this pixel.",34],[10,"apply","","Apply the function ```f``` to each channel of this pixel.",34],[10,"map_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel.",34],[10,"apply_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel. Works in-place.",34],[10,"map2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise.",34],[10,"apply2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise. Works in-place.",34],[10,"invert","","Invert this pixel",34],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",34],[8,"ImageDecoder","","The trait that all decoders implement"],[10,"dimensions","","Returns a tuple containing the width and height of the image",35],[10,"colortype","","Returns the color type of the image e.g RGB(8) (8bit RGB)",35],[10,"row_len","","Returns the length in bytes of one decoded row of the image",35],[11,"is_animated","","Returns true if the image is animated",35],[11,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",35],[10,"read_scanline","","Reads one row from the image into buf and returns the row index",35],[10,"read_image","","Decodes the entire image and return it as a Vector",35],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",35],[8,"GenericImage","","A trait for manipulating images."],[16,"Pixel","image::GenericImage","The type of pixel."],[10,"dimensions","image","The width and height of this image.",36],[10,"bounds","","The bounding rectangle of this image.",36],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",36],[10,"get_pixel","","Returns the pixel located at (x, y)",36],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",36],[10,"put_pixel","","Put a pixel at location (x, y)",36],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",36],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",36],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",36],[11,"is_animated","","Returns true if the image is animated",35],[11,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",35],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",35],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",36],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",36],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",36],[11,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to\nadjust it's alpha value accordingly.",37]],"paths":[[4,"ColorType"],[4,"ImageError"],[4,"ImageFormat"],[4,"FilterType"],[4,"DynamicImage"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ZlibDecoder"],[3,"Inflater"],[3,"Adler32"],[3,"Crc32"],[3,"Component"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"GIFDecoder"],[4,"ByteOrder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"Rgb"],[3,"Luma"],[3,"Rgba"],[3,"LumaA"],[3,"Vec"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"Primitive"],[8,"Pixel"],[8,"ImageDecoder"],[8,"GenericImage"],[6,"GrayImage"]]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics."],[5,"zero","","Returns the additive identity, `0`."],[5,"one","","Returns the multiplicative identity, `1`."],[5,"abs","","Computes the absolute value."],[5,"abs_sub","","The positive difference of two numbers."],[5,"signum","","Returns the sign of the number."],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring."],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`)."],[3,"BigUint","num::bigint","A big unsigned integer type."],[3,"BigInt","","A big signed integer type."],[4,"Sign","","A Sign is a `BigInt`'s composing element."],[13,"Minus","","",0],[13,"NoSign","","",0],[13,"Plus","","",0],[0,"big_digit","",""],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s."],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`"],[17,"BITS","",""],[17,"BASE","",""],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element."],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`."],[17,"ZERO_BIG_DIGIT","",""],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`."],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",1],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`."],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",2],[8,"RandBigInt","",""],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",3],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",3],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",3],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[11,"fmt","","",4],[11,"decode","","",4],[11,"encode","","",4],[11,"clone","","",4],[11,"eq","","",4],[11,"partial_cmp","","",4],[11,"cmp","","",4],[11,"default","","",4],[11,"hash","","",4],[11,"fmt","","",4],[11,"from_str","","",4],[6,"Output","",""],[11,"bitand","","",4],[6,"Output","",""],[6,"Output","",""],[11,"bitand","","",4],[6,"Output","",""],[6,"Output","",""],[11,"bitor","","",4],[6,"Output","",""],[6,"Output","",""],[11,"bitor","","",4],[6,"Output","",""],[6,"Output","",""],[11,"bitxor","","",4],[6,"Output","",""],[6,"Output","",""],[11,"bitxor","","",4],[6,"Output","",""],[6,"Output","",""],[11,"shl","","",4],[6,"Output","",""],[6,"Output","",""],[11,"shr","","",4],[6,"Output","",""],[11,"zero","","",4],[11,"is_zero","","",4],[11,"one","","",4],[6,"Output","",""],[11,"add","","",4],[6,"Output","",""],[6,"Output","",""],[11,"add","","",4],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",4],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",4],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",4],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",4],[6,"Output","",""],[6,"Output","",""],[11,"div","","",4],[6,"Output","",""],[6,"Output","",""],[11,"div","","",4],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",4],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",4],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",4],[6,"Output","",""],[11,"checked_add","","",4],[11,"checked_sub","","",4],[11,"checked_mul","","",4],[11,"checked_div","","",4],[11,"div_rem","","",4],[11,"div_floor","","",4],[11,"mod_floor","","",4],[11,"div_mod_floor","","",4],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",4],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",4],[11,"divides","","Deprecated, use `is_multiple_of` instead.",4],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",4],[11,"is_even","","Returns `true` if the number is divisible by `2`.",4],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",4],[11,"to_i64","","",4],[11,"to_u64","","",4],[11,"from_i64","","",4],[11,"from_u64","","",4],[11,"to_biguint","","",5],[11,"to_biguint","","",4],[11,"from_str_radix","","Creates and initializes a `BigUint`.",4],[11,"new","","Creates and initializes a `BigUint`.",4],[11,"from_slice","","Creates and initializes a `BigUint`.",4],[11,"parse_bytes","","Creates and initializes a `BigUint`.",4],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",4],[11,"decode","","",0],[11,"encode","","",0],[11,"fmt","","",0],[11,"clone","","",0],[11,"cmp","","",0],[11,"partial_cmp","","",0],[11,"lt","","",0],[11,"le","","",0],[11,"gt","","",0],[11,"ge","","",0],[11,"eq","","",0],[11,"ne","","",0],[6,"Output","",""],[11,"neg","","Negate Sign value.",0],[11,"fmt","","",5],[11,"decode","","",5],[11,"encode","","",5],[11,"clone","","",5],[11,"eq","","",5],[11,"partial_cmp","","",5],[11,"cmp","","",5],[11,"default","","",5],[11,"fmt","","",5],[11,"hash","","",5],[11,"from_str","","",5],[6,"Output","",""],[11,"shl","","",5],[6,"Output","",""],[6,"Output","",""],[11,"shr","","",5],[6,"Output","",""],[11,"zero","","",5],[11,"is_zero","","",5],[11,"one","","",5],[11,"abs","","",5],[11,"abs_sub","","",5],[11,"signum","","",5],[11,"is_positive","","",5],[11,"is_negative","","",5],[6,"Output","",""],[11,"add","","",5],[6,"Output","",""],[6,"Output","",""],[11,"add","","",5],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",5],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",5],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",5],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",5],[6,"Output","",""],[6,"Output","",""],[11,"div","","",5],[6,"Output","",""],[6,"Output","",""],[11,"div","","",5],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",5],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",5],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",5],[6,"Output","",""],[11,"checked_add","","",5],[11,"checked_sub","","",5],[11,"checked_mul","","",5],[11,"checked_div","","",5],[11,"div_rem","","",5],[11,"div_floor","","",5],[11,"mod_floor","","",5],[11,"div_mod_floor","","",5],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5],[11,"to_i64","","",5],[11,"to_u64","","",5],[11,"from_i64","","",5],[11,"from_u64","","",5],[11,"to_bigint","","",5],[11,"to_bigint","","",4],[11,"from_str_radix","","Creates and initializes a BigInt.",5],[11,"new","","Creates and initializes a BigInt.",5],[11,"from_biguint","","Creates and initializes a `BigInt`.",5],[11,"from_slice","","Creates and initializes a `BigInt`.",5],[11,"parse_bytes","","Creates and initializes a `BigInt`.",5],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",5],[11,"checked_add","","",5],[11,"checked_sub","","",5],[11,"checked_mul","","",5],[11,"checked_div","","",5],[0,"complex","num","Complex numbers."],[3,"Complex","num::complex","A complex number in Cartesian form."],[12,"re","","Real portion of the complex number",6],[12,"im","","Imaginary portion of the complex number",6],[6,"Complex32","",""],[6,"Complex64","",""],[11,"fmt","","",6],[11,"decode","","",6],[11,"encode","","",6],[11,"hash","","",6],[11,"clone","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"new","","Create a new Complex",6],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",6],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",6],[11,"scale","","Multiplies `self` by the scalar `t`.",6],[11,"unscale","","Divides `self` by the scalar `t`.",6],[11,"inv","","Returns `1/self`",6],[11,"norm","","Calculate |self|",6],[11,"arg","","Calculate the principal Arg of self.",6],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",6],[11,"from_polar","","Convert a polar representation into a complex number.",6],[6,"Output","",""],[11,"add","","",6],[6,"Output","",""],[6,"Output","",""],[11,"add","","",6],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",6],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",6],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",6],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",6],[6,"Output","",""],[6,"Output","",""],[11,"div","","",6],[6,"Output","",""],[6,"Output","",""],[11,"div","","",6],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",6],[6,"Output","",""],[11,"zero","","",6],[11,"is_zero","","",6],[11,"one","","",6],[11,"fmt","","",6],[0,"integer","num","Integer trait and functions."],[5,"div_rem","num::integer","Simultaneous integer division and modulus"],[5,"div_floor","","Floored integer division"],[5,"mod_floor","","Floored integer modulus"],[5,"div_mod_floor","","Simultaneous floored integer division and modulus"],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive."],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`."],[8,"Integer","",""],[10,"div_floor","","Floored integer division.",7],[10,"mod_floor","","Floored integer modulo, satisfying:",7],[10,"gcd","","Greatest Common Divisor (GCD).",7],[10,"lcm","","Lowest Common Multiple (LCM).",7],[10,"divides","","Deprecated, use `is_multiple_of` instead.",7],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",7],[10,"is_even","","Returns `true` if the number is even.",7],[10,"is_odd","","Returns `true` if the number is odd.",7],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",7],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",7],[0,"iter","num","External iterators for generic mathematics"],[3,"Range","num::iter","An iterator over the range [start, stop)"],[3,"RangeInclusive","","An iterator over the range [start, stop]"],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[5,"range_inclusive","","Return an iterator over the range [start, stop]"],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[11,"clone","","",8],[6,"Item","",""],[11,"next","","",8],[11,"size_hint","","",8],[11,"next_back","","",8],[11,"clone","","",9],[6,"Item","",""],[11,"next","","",9],[11,"size_hint","","",9],[11,"next_back","","",9],[11,"clone","","",10],[6,"Item","",""],[11,"next","","",10],[11,"clone","","",11],[6,"Item","",""],[11,"next","","",11],[0,"traits","num","Numeric traits for generic mathematics"],[8,"Num","num::traits","The base trait for numeric types"],[8,"Zero","","Defines an additive identity element for `Self`."],[10,"zero","","Returns the additive identity element of `Self`, `0`.",12],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",12],[8,"One","","Defines a multiplicative identity element for `Self`."],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",13],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative)."],[10,"abs","","Computes the absolute value.",14],[10,"abs_sub","","The positive difference of two numbers.",14],[10,"signum","","Returns the sign of the number.",14],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",14],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",14],[8,"Unsigned","","A trait for values which cannot be negative"],[8,"Bounded","","Numbers which have upper and lower bounds"],[10,"min_value","","returns the smallest finite number this type can represent",15],[10,"max_value","","returns the largest finite number this type can represent",15],[8,"Saturating","","Saturating math operations"],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",16],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",16],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow."],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",17],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow."],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",18],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow."],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow\nhappens, `None` is returned.",19],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow."],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that\nhappens, `None` is returned.",20],[0,"rational","num","Rational numbers"],[3,"Ratio","num::rational","Represents the ratio between 2 numbers."],[6,"Rational","","Alias for a `Ratio` of machine-sized integers."],[6,"Rational32","",""],[6,"Rational64","",""],[6,"BigRational","","Alias for arbitrary precision rationals."],[11,"fmt","","",21],[11,"decode","","",21],[11,"encode","","",21],[11,"hash","","",21],[11,"clone","","",21],[11,"from_integer","","Creates a ratio representing the integer `t`.",21],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",21],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",21],[11,"to_integer","","Converts to an integer.",21],[11,"numer","","Gets an immutable reference to the numerator.",21],[11,"denom","","Gets an immutable reference to the denominator.",21],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",21],[11,"reduced","","Returns a `reduce`d copy of self.",21],[11,"recip","","Returns the reciprocal.",21],[11,"floor","","Rounds towards minus infinity.",21],[11,"ceil","","Rounds towards plus infinity.",21],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",21],[11,"trunc","","Rounds towards zero.",21],[11,"fract","","Returns the fractional part of a number.",21],[11,"from_float","","Converts a float into a rational number.",21],[11,"eq","","",21],[11,"ne","","",21],[11,"lt","","",21],[11,"gt","","",21],[11,"le","","",21],[11,"ge","","",21],[11,"partial_cmp","","",21],[11,"cmp","","",21],[6,"Output","",""],[11,"mul","","",21],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",21],[6,"Output","",""],[6,"Output","",""],[11,"div","","",21],[6,"Output","",""],[6,"Output","",""],[11,"div","","",21],[6,"Output","",""],[6,"Output","",""],[11,"add","","",21],[6,"Output","",""],[6,"Output","",""],[11,"add","","",21],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",21],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",21],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",21],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",21],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",21],[6,"Output","",""],[11,"zero","","",21],[11,"is_zero","","",21],[11,"one","","",21],[11,"abs","","",21],[11,"abs_sub","","",21],[11,"signum","","",21],[11,"is_positive","","",21],[11,"is_negative","","",21],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",21],[11,"from_str","","Parses `numer/denom` or just `numer`.",21],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",21]],"paths":[[4,"Sign"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[3,"Ratio"]]};

searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::path::posix","",5],[11,"decode","","",5],[11,"encode","std::path::windows","",6],[11,"decode","","",6],[11,"encode","core::cell","",7],[11,"decode","","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","alloc::arc","",9],[11,"decode","","",9],[11,"encode","collections::dlist","",10],[11,"decode","","",10],[11,"encode","collections::ring_buf","",11],[11,"decode","","",11],[11,"encode","collections::btree::map","",12],[11,"decode","","",12],[11,"encode","collections::btree::set","",13],[11,"decode","","",13],[11,"encode","std::collections::hash::map","",14],[11,"decode","","",14],[11,"encode","std::collections::hash::set","",15],[11,"decode","","",15],[11,"encode","collections::vec_map","",16],[11,"decode","","",16],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[3,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[12,"char_set","","Character set to use",17],[12,"newline","","Newline to use",17],[12,"pad","","True to pad output with `=` characters",17],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17],[4,"CharacterSet","","Available encoding character sets"],[13,"Standard","","The standard character set (uses `+` and `/`)",18],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18],[4,"Newline","","Available newline types"],[13,"LF","","A linefeed (i.e. Unix-style newline)",19],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20],[13,"InvalidBase64Length","","The input had an invalid length",20],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[8,"ToBase64","","A trait for converting a value to base64 encoding."],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21],[8,"FromBase64","","A trait for converting from base64 encoded values."],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22],[11,"fmt","","",20],[11,"description","","",20],[11,"fmt","","",20],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[4,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",23],[13,"InvalidHexLength","","The input had an invalid length",23],[8,"ToHex","","A trait for converting a value to hexadecimal encoding"],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24],[8,"FromHex","","A trait for converting hexadecimal encoded values"],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25],[11,"fmt","","",23],[11,"description","","",23],[11,"fmt","","",23],[0,"json","rustc-serialize","JSON parsing and serialization"],[3,"PrettyJson","rustc-serialize::json",""],[3,"AsJson","",""],[3,"AsPrettyJson","",""],[3,"Encoder","","A structure for implementing serialization to JSON."],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[3,"Decoder","","A structure to decode JSON to values in rust."],[4,"Json","","Represents a json value"],[13,"I64","","",26],[13,"U64","","",26],[13,"F64","","",26],[13,"String","","",26],[13,"Boolean","","",26],[13,"Array","","",26],[13,"Object","","",26],[13,"Null","","",26],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[13,"InvalidSyntax","","",27],[13,"InvalidNumber","","",27],[13,"EOFWhileParsingObject","","",27],[13,"EOFWhileParsingArray","","",27],[13,"EOFWhileParsingValue","","",27],[13,"EOFWhileParsingString","","",27],[13,"KeyMustBeAString","","",27],[13,"ExpectedColon","","",27],[13,"TrailingCharacters","","",27],[13,"TrailingComma","","",27],[13,"InvalidEscape","","",27],[13,"InvalidUnicodeCodePoint","","",27],[13,"LoneLeadingSurrogateInHexEscape","","",27],[13,"UnexpectedEndOfHexEscape","","",27],[13,"UnrecognizedHex","","",27],[13,"NotFourDigit","","",27],[13,"NotUtf8","","",27],[4,"ParserError","",""],[13,"SyntaxError","","msg, line, col",28],[13,"IoError","","",28],[4,"DecoderError","",""],[13,"ParseError","","",29],[13,"ExpectedError","","",29],[13,"MissingFieldError","","",29],[13,"UnknownVariantError","","",29],[13,"ApplicationError","","",29],[4,"EncoderError","",""],[13,"FmtError","","",30],[13,"BadHashmapKey","","",30],[4,"JsonEvent","","The output of the streaming parser."],[13,"ObjectStart","","",31],[13,"ObjectEnd","","",31],[13,"ArrayStart","","",31],[13,"ArrayEnd","","",31],[13,"BooleanValue","","",31],[13,"I64Value","","",31],[13,"U64Value","","",31],[13,"F64Value","","",31],[13,"StringValue","","",31],[13,"NullValue","","",31],[13,"Error","","",31],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[13,"Index","","",32],[13,"Key","","",32],[5,"error_str","","Returns a readable error string for a given error code."],[5,"decode","","Shortcut function to decode a JSON `&str` into an object"],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[6,"Array","",""],[6,"Object","",""],[6,"BuilderError","",""],[6,"EncodeResult","",""],[6,"DecodeResult","",""],[8,"ToJson","","A trait for converting values to JSON"],[10,"to_json","","Converts the value of `self` to an instance of JSON",33],[11,"fmt","","",26],[11,"partial_cmp","","",26],[11,"lt","","",26],[11,"le","","",26],[11,"gt","","",26],[11,"ge","","",26],[11,"eq","","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"eq","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"fmt","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"fmt","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"fmt","","",30],[11,"fmt","","",27],[11,"description","","",29],[11,"cause","","",29],[11,"fmt","","",29],[11,"description","","",28],[11,"fmt","","",28],[11,"description","","",30],[11,"fmt","","",30],[11,"from_error","","",30],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",34],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",34],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34],[6,"Error","",""],[11,"emit_nil","","",34],[11,"emit_usize","","",34],[11,"emit_u64","","",34],[11,"emit_u32","","",34],[11,"emit_u16","","",34],[11,"emit_u8","","",34],[11,"emit_isize","","",34],[11,"emit_i64","","",34],[11,"emit_i32","","",34],[11,"emit_i16","","",34],[11,"emit_i8","","",34],[11,"emit_bool","","",34],[11,"emit_f64","","",34],[11,"emit_f32","","",34],[11,"emit_char","","",34],[11,"emit_str","","",34],[11,"emit_enum","","",34],[11,"emit_enum_variant","","",34],[11,"emit_enum_variant_arg","","",34],[11,"emit_enum_struct_variant","","",34],[11,"emit_enum_struct_variant_field","","",34],[11,"emit_struct","","",34],[11,"emit_struct_field","","",34],[11,"emit_tuple","","",34],[11,"emit_tuple_arg","","",34],[11,"emit_tuple_struct","","",34],[11,"emit_tuple_struct_arg","","",34],[11,"emit_option","","",34],[11,"emit_option_none","","",34],[11,"emit_option_some","","",34],[11,"emit_seq","","",34],[11,"emit_seq_elt","","",34],[11,"emit_map","","",34],[11,"emit_map_elt_key","","",34],[11,"emit_map_elt_val","","",34],[11,"encode","","",26],[11,"from_reader","","Decodes a json value from an `&mut old_io::Reader`",26],[11,"from_str","","Decodes a json value from a string",26],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Show`.",26],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26],[6,"Output","",""],[11,"index","","",26],[6,"Output","",""],[11,"index","","",26],[11,"fmt","","",31],[11,"clone","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"fmt","","",32],[11,"clone","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"new","","",35],[11,"len","","Returns The number of elements in the Stack.",35],[11,"is_empty","","Returns true if the stack is empty.",35],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35],[11,"is_equal_to","","Compares this stack with an array of StackElements.",35],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35],[11,"top","","Returns the top-most element (if any).",35],[6,"Item","",""],[11,"next","","",36],[11,"new","","Creates the JSON parser.",36],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36],[11,"new","","Create a JSON Builder.",37],[11,"build","","",37],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",38],[6,"Error","",""],[11,"read_nil","","",38],[11,"read_usize","","",38],[11,"read_u8","","",38],[11,"read_u16","","",38],[11,"read_u32","","",38],[11,"read_u64","","",38],[11,"read_isize","","",38],[11,"read_i8","","",38],[11,"read_i16","","",38],[11,"read_i32","","",38],[11,"read_i64","","",38],[11,"read_f32","","",38],[11,"read_f64","","",38],[11,"read_bool","","",38],[11,"read_char","","",38],[11,"read_str","","",38],[11,"read_enum","","",38],[11,"read_enum_variant","","",38],[11,"read_enum_variant_arg","","",38],[11,"read_enum_struct_variant","","",38],[11,"read_enum_struct_variant_field","","",38],[11,"read_struct","","",38],[11,"read_struct_field","","",38],[11,"read_tuple","","",38],[11,"read_tuple_arg","","",38],[11,"read_tuple_struct","","",38],[11,"read_tuple_struct_arg","","",38],[11,"read_option","","",38],[11,"read_seq","","",38],[11,"read_seq_elt","","",38],[11,"read_map","","",38],[11,"read_map_elt_key","","",38],[11,"read_map_elt_val","","",38],[11,"error","","",38],[11,"to_json","","",26],[11,"to_json","collections::string","",0],[11,"to_json","collections::vec","",3],[11,"to_json","collections::btree::map","",12],[11,"to_json","std::collections::hash::map","",14],[11,"to_json","core::option","",4],[11,"fmt","rustc-serialize::json","Encodes a json value into a string",26],[11,"fmt","","Encodes a json value into a string",39],[11,"fmt","","Encodes a json value into a string",40],[11,"indent","","Set the indentation level for the emitted JSON",41],[11,"fmt","","Encodes a json value into a string",41],[11,"from_str","","",26],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::path::posix","",5],[11,"decode","","",5],[11,"encode","std::path::windows","",6],[11,"decode","","",6],[11,"encode","core::cell","",7],[11,"decode","","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","alloc::arc","",9],[11,"decode","","",9],[8,"Decoder","rustc-serialize",""],[16,"Error","rustc-serialize::Decoder",""],[10,"read_nil","rustc-serialize","",42],[10,"read_usize","","",42],[10,"read_u64","","",42],[10,"read_u32","","",42],[10,"read_u16","","",42],[10,"read_u8","","",42],[10,"read_isize","","",42],[10,"read_i64","","",42],[10,"read_i32","","",42],[10,"read_i16","","",42],[10,"read_i8","","",42],[10,"read_bool","","",42],[10,"read_f64","","",42],[10,"read_f32","","",42],[10,"read_char","","",42],[10,"read_str","","",42],[10,"read_enum","","",42],[10,"read_enum_variant","","",42],[10,"read_enum_variant_arg","","",42],[10,"read_enum_struct_variant","","",42],[10,"read_enum_struct_variant_field","","",42],[10,"read_struct","","",42],[10,"read_struct_field","","",42],[10,"read_tuple","","",42],[10,"read_tuple_arg","","",42],[10,"read_tuple_struct","","",42],[10,"read_tuple_struct_arg","","",42],[10,"read_option","","",42],[10,"read_seq","","",42],[10,"read_seq_elt","","",42],[10,"read_map","","",42],[10,"read_map_elt_key","","",42],[10,"read_map_elt_val","","",42],[10,"error","","",42],[8,"Encoder","",""],[16,"Error","rustc-serialize::Encoder",""],[10,"emit_nil","rustc-serialize","",43],[10,"emit_usize","","",43],[10,"emit_u64","","",43],[10,"emit_u32","","",43],[10,"emit_u16","","",43],[10,"emit_u8","","",43],[10,"emit_isize","","",43],[10,"emit_i64","","",43],[10,"emit_i32","","",43],[10,"emit_i16","","",43],[10,"emit_i8","","",43],[10,"emit_bool","","",43],[10,"emit_f64","","",43],[10,"emit_f32","","",43],[10,"emit_char","","",43],[10,"emit_str","","",43],[10,"emit_enum","","",43],[10,"emit_enum_variant","","",43],[10,"emit_enum_variant_arg","","",43],[10,"emit_enum_struct_variant","","",43],[10,"emit_enum_struct_variant_field","","",43],[10,"emit_struct","","",43],[10,"emit_struct_field","","",43],[10,"emit_tuple","","",43],[10,"emit_tuple_arg","","",43],[10,"emit_tuple_struct","","",43],[10,"emit_tuple_struct_arg","","",43],[10,"emit_option","","",43],[10,"emit_option_none","","",43],[10,"emit_option_some","","",43],[10,"emit_seq","","",43],[10,"emit_seq_elt","","",43],[10,"emit_map","","",43],[10,"emit_map_elt_key","","",43],[10,"emit_map_elt_val","","",43],[8,"Decodable","",""],[10,"decode","","",44],[8,"Encodable","",""],[10,"encode","","",45],[8,"DecoderHelpers","",""],[10,"read_to_vec","","",46],[8,"EncoderHelpers","",""],[10,"emit_from_vec","","",47]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"Path"],[3,"Path"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"DList"],[3,"RingBuf"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"VecMap"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};

initSearch(searchIndex);
